// <auto-generated />
using System;
using CarRental.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRentalAPI.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Toyota",
                            CityId = 1,
                            ImageUrl = "https://carrentalapkstorage.blob.core.windows.net/images/corolla.jpg",
                            IsAvailable = true,
                            Model = "Corolla",
                            PricePerDay = 150.00m,
                            Year = 2022
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Skoda",
                            CityId = 1,
                            ImageUrl = "https://carrentalapkstorage.blob.core.windows.net/images/octavia.jpg",
                            IsAvailable = true,
                            Model = "Octavia",
                            PricePerDay = 180.00m,
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Volkswagen",
                            CityId = 2,
                            ImageUrl = "https://carrentalapkstorage.blob.core.windows.net/images/golf.jpg",
                            IsAvailable = true,
                            Model = "Golf",
                            PricePerDay = 130.00m,
                            Year = 2021
                        },
                        new
                        {
                            Id = 4,
                            Brand = "BMW",
                            CityId = 3,
                            ImageUrl = "https://carrentalapkstorage.blob.core.windows.net/images/bmw3.jpg",
                            IsAvailable = true,
                            Model = "3 Series",
                            PricePerDay = 250.00m,
                            Year = 2024
                        });
                });

            modelBuilder.Entity("CarRentalAPI.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://carrentalapkstorage.blob.core.windows.net/images/warsaw.jpg",
                            Name = "Warszawa"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://carrentalapkstorage.blob.core.windows.net/images/krakow.jpg",
                            Name = "Kraków"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://carrentalapkstorage.blob.core.windows.net/images/gdansk.jpg",
                            Name = "Gdańsk"
                        });
                });

            modelBuilder.Entity("CarRentalAPI.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("CarRentalAPI.Models.Car", b =>
                {
                    b.HasOne("CarRentalAPI.Models.City", "City")
                        .WithMany("Cars")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CarRentalAPI.Models.Reservation", b =>
                {
                    b.HasOne("CarRentalAPI.Models.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarRentalAPI.Models.Car", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CarRentalAPI.Models.City", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
